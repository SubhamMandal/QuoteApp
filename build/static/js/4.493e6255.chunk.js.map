{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","error","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,2FCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAK,SAAEH,EAAMI,UAC9C,E,yBCuDeC,EApDG,SAACL,GACjB,MAAoCM,oBAAS,GAAM,mBAA5CC,EAAU,KAAEC,EAAa,KAC1BC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACE,eAAC,WAAQ,WACP,cAAC,IAAM,CAACE,KAAML,EAAYM,QAAS,SAACC,GAAQ,MAAK,4DAA4D,IAC7G,cAAC,EAAI,UACH,uBAAMC,QAZa,WACvBP,GAAc,EAChB,EAUuCP,UAAWC,IAAQc,KAAMC,SAvBhE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GAClD,EAc4F,UACnFvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAQ,SAC9B,cAACC,EAAA,EAAc,MAInB,sBAAK5B,UAAWC,IAAQ4B,QAAQ,UAC9B,uBAAOC,QAAQ,SAAQ,oBACvB,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAEtC,sBAAKR,UAAWC,IAAQ4B,QAAQ,UAC9B,uBAAOC,QAAQ,OAAM,kBACrB,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEpC,qBAAKV,UAAWC,IAAQkC,QAAQ,SAC9B,wBAAQC,QAxBI,WACpB7B,GAAc,EAChB,EAsB0CP,UAAU,MAAK,gCAM3D,E,gBC5BeqC,UAvBE,WACb,IAAMC,EAAUC,cAChB,EAAuCC,YAAQC,KAAvCC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAQC,EAAK,EAALA,MAE7BC,qBAAU,WACDD,GAAoB,cAAXD,GACVL,EAAQQ,KAAK,UAErB,GAAG,CAACH,EAAQL,EAASM,IAMrB,OAAIA,EACO,mBAAG5C,UAAU,WAAU,gCAI9B,cAAC,EAAS,CAAC0B,UAAsB,YAAXiB,EAAsBpB,WATxB,SAACwB,GACrBL,EAAYK,EAChB,GASJ,C","file":"static/js/4.493e6255.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3Mh3p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3GSsl\",\"loading\":\"QuoteForm_loading__1y6nv\",\"control\":\"QuoteForm_control__Sn3Kz\",\"actions\":\"QuoteForm_actions__2vIAs\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusHandler = () => {\n    setIsEntering(true);\n  }\n\n  const finishHandler = () => {\n    setIsEntering(false);\n  }\n\n  return (\n    <Fragment>\n      <Prompt when={isEntering} message={(location) => 'Are you sure you want to leave? All you data will be lost!'} />\n      <Card>\n        <form onFocus={formFocusHandler} className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishHandler} className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n    const history = useHistory();\r\n    const { sendRequest, status, error } = useHttp(addQuote);\r\n\r\n    useEffect(() => {\r\n        if (!error && status === 'completed') {\r\n            history.push('/quotes');\r\n        }\r\n    }, [status, history, error]);\r\n\r\n    const addQuoteHandler = (quoteData) => {\r\n        sendRequest(quoteData);\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'>some error occured</p>\r\n    }\r\n\r\n    return (\r\n        <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n    );\r\n}\r\n\r\nexport default NewQuote;"],"sourceRoot":""}